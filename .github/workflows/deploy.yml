name: Deploy to Google Cloud

on:
  push:
    branches:
      - main

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: asia-south1
  REPO_NAME: ppt-studio-repo

jobs:
  deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    # This output will be used by the frontend job to get the API URL
    outputs:
      api_url: ${{ steps.store-api-url.outputs.url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # ---------------------------
      # Build & Push ONE Backend Image for both API and Worker
      # ---------------------------
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile # Using the single, consolidated Dockerfile
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/ppt-studio-backend:${{ github.sha }}

      # ---------------------------
      # Deploy API Service from the Backend Image
      # ---------------------------
      - name: Deploy API Service
        run: |
          REDIS_URL="redis://$(gcloud redis instances describe ppt-studio-redis --region=${{ env.GCP_REGION }} --format='value(host)'):6379/0"
          gcloud run deploy ppt-studio-api \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/ppt-studio-backend:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --allow-unauthenticated \
            --vpc-connector=vpc-connector \
            --set-env-vars="REDIS_URL=$REDIS_URL" \
            --set-secrets="GOOGLE_API_KEY=gemini-api-key:latest" \
            --command="uvicorn" \
            --args="app.main:app,--host,0.0.0.0,--port,8080"

      - name: Store API URL for Frontend Job
        id: store-api-url
        run: echo "url=$(gcloud run services describe ppt-studio-api --platform=managed --region=${{ env.GCP_REGION }} --format='value(status.url)')" >> $GITHUB_OUTPUT

      # ---------------------------
      # Deploy Worker Service from the SAME Backend Image
      # ---------------------------
      - name: Deploy Worker Service
        run: |
          REDIS_URL="redis://$(gcloud redis instances describe ppt-studio-redis --region=${{ env.GCP_REGION }} --format='value(host)'):6379/0"
          gcloud run deploy ppt-studio-worker \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/ppt-studio-backend:${{ github.sha }} \
            --region=${{ env.GCP_REGION }} \
            --no-allow-unauthenticated \
            --vpc-connector=vpc-connector \
            --set-env-vars="REDIS_URL=$REDIS_URL" \
            --set-secrets="GOOGLE_API_KEY=gemini-api-key:latest" \
            --no-cpu-throttling \
            --command="/app/worker_entrypoint.sh" # Use absolute path for reliability


  deploy-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend # This ensures the backend is deployed first and the API URL is available

    # Set environment variable for this job from the backend job's output
    env:
      VITE_API_URL: ${{ needs.deploy-backend.outputs.api_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./frontend
      
      # This is a cleaner way to provide the API URL to your Vite app
      - name: Create .env file for Frontend
        run: |
          echo "VITE_API_URL=${{ env.VITE_API_URL }}" > .env.production
        working-directory: ./frontend
      
      - name: Build React App
        run: npm run build
        working-directory: ./frontend
        
      - name: Deploy to Firebase Hosting
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}'
          projectId: ${{ env.GCP_PROJECT_ID }}
          entryPoint: ./frontend
          channelId: live
